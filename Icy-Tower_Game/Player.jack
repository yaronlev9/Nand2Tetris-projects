
/** A class that represents the player */
class Player {

    field int x, y, gravity, length, jump;
    field boolean jumpable;

    /**
    Ctor
    jumpable: the ability of the player to jump.
    jump: the height in which the player can jump.
    length: the length of the cube.
    x: the x coordinate of the player.
    y: the y coordinate of the player.
    gravity: the amount of gravity that pull the player down.
    */
    constructor Player new(int nx, int ny){
        let jumpable = true;
        let jump = 50;
        let length = 10;
        let x = nx;
        let y = ny;
        let gravity = 0;
        return this;
    }

    /**
    returns if the player can jump.
    :return jumpable:
    */
    method boolean getJumpable(){
        return jumpable;
    }

    /**
    sets the player ability to jump depends on the condition.
    :param condition:
    */
    method void setJumpable(boolean condition){
        let jumpable = condition;
        return;
    }

    /**
    returns the x coordinate.
    :return x:
    */
    method int getX(){
        return x;
    }

    /**
    returns the y coordinate.
    :return y:
    */
    method int getY(){
        return y;
    }

    /**
    sets the gravity.
    :param number:
    */
    method void setGravity(int number){
        let gravity = number;
        return;
    }

    /**
    returns the gravity.
    :return gravity:
    */
    method int getGravity(){
        return gravity;
    }

    /**
    draws the player.
    */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + length, y + length);
        return;
    }

    /**
    erases the player.
    */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + length, y + length);
        return;
    }

    /**
    moves the player according to the direction and speed given.
    :param direction:
    :param speed:
    */
    method void move(int direction, int speed){
        //if jump is pressed.
        if (direction = 1){
            let y = (y - jump) + gravity + speed;
            if (y>194){
                let y = 194;
            }
            let jumpable = false;
            return;
            //if left is pressed.
        } if (direction = 2){
           let y = y + gravity + speed;
           let x = x - 30;
           if (y>194){
                let y = 194;
            }
           return;
           //if right is pressed.
        } if (direction = 3){
           let y = y + gravity + speed;
           let x = x + 30;
           if (y>194){
                let y = 194;
            }
           return;
           //if no button is pressed.
        } if (direction = 0) {
            let y = y + gravity + speed;
            if (y>194){
                let y = 194;
            }
            return;
            //if left is pressed and reached left wall.
        } if (direction = 4){
            let x = 51;
            let y = y + gravity + speed;
            if (y>194){
                let y = 194;
            }
            return;
            //if right is pressed and reached right wall.
        } if (direction = 5){
            let x = 451;
            let y = y + gravity + speed;
            if (y>194){
                let y = 194;
            }
            return;
        }
        return;
    }
    /**
    disposes the player.
    */
    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}