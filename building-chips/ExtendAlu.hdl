/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift
* of x, moreover if instruction[5] equals 0 it will return shift right
* otherwise shift left.
*/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;

     PARTS:
    //makes all the shifts
    ShiftLeft(in = x, out = Ltx);
    ShiftLeft(in = y, out = Lty);
    ShiftRight(in = x, out = Rtx);
    ShiftRight(in = y, out = Rty);
    //chooses the shift
    Mux4Way16(a= Rty,b= Rtx, c=Lty, d=Ltx, sel = instruction[4..5], out = outShift);

    //makes the multiplication
    Mul(a = x, b= y, out = outMul);

    //computes in the ALU
    ALU(x=x,y=y,zx=instruction[5],nx=instruction[4],zy=instruction[3],ny=instruction[2],f=instruction[1],
    no=instruction[0],out=outAlu,zr=zrOut,ng=ngOut);

    //chooses between the 4 possibilities
    Mux4Way16 (a = outMul, b = outShift, c = outMul, d = outAlu, sel = instruction[7..8], out[15] = ng,
    out[0..7] = sub1, out[8..15]= sub2, out = out);
    Or8Way (in = sub1, out = cond1);
    Or8Way (in = sub2, out = cond2);
    Or (a = cond1, b = cond2, out = zr1);
    Not (in = zr1, out = zr); //returns 1 if zr1 is 0 and the opposite

}
