// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory;
    static int base, lowest;
    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let base = 2048;
        let lowest = 16384;
        let memory[base] = lowest - base;
        let memory[base + 1] = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prevBlock, nextBlock, curBlock, block;
        let prevBlock = base;
        let curBlock = base;
        let nextBlock = base + 1;
        let block = -1;
        while (~(memory[curBlock]>size) & ~(memory[nextBlock] = -1)){
            let prevBlock = curBlock;
            let curBlock = memory[nextBlock];
            let nextBlock = memory[nextBlock + 1];
        }
        if (~(nextBlock = -1)){
            if (curBlock < (size + 3)){
                let memory[prevBlock + 1] = memory[curBlock + 1];
                let memory[curBlock] = size + 1;
                let block = curBlock + 1;
            } else {
                let memory[curBlock] = memory[curBlock] - size - 1;
                let block = curBlock + memory[curBlock];
                let memory[block - 1] = size + 1;
            }
        }
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(int obj) {
        let memory[obj] = memory[obj - 1];
        let memory[obj + 1] = memory[base + 1];
        let memory[base + 1] = obj;
        return;
    }
}
