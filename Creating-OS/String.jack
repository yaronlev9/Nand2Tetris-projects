// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field int len;
	field int maxLen;
	field Array string;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength){
		if (maxLength = 0){ // String has to have maxLength >=1
			let maxLength = 1;
		}
		let maxLen = maxLength;
		let len = 0;
		let string = Array.new(maxLen);
		return this;
    }

    /** Disposes this string. */
    method void dispose(){
		do string.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length(){
		return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j){
		return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c){
		let string[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c){
		if (len < maxLen){
			let string[len] = c;
			let len = len + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar(){
		if (len > 0){
			let len = len - 1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue(){
		var int idx, result;
		var boolean isNegative;
		let idx = 0;
		let result = 0;

		// Determine if string represents a negative or a positive
		if (len > 0){
			if (string[0] = 45){
				let isNegative = true;
				let idx = idx + 1;
			}else{
				let isNegative = false;
			}
		}

		// If char is a digit (i.e. between 48 and 57 inclusive) then
		// convert char to int (subtracting 48) and add with multiple of 10
		while (idx < len & ~(string[idx] < 48 | string[idx] > 57)){
			let result = result*10 + (string[idx] - 48);
			let idx = idx + 1;
		}
		if (isNegative){
			return -result;
		}
		return result;
    }

	/** Helper method for setInt, val is guaranteed to be positive */
	method void setIntHelper(int val){
		var int lastDigit;
		var int nextVal;
		let nextVal = val/10;
		let lastDigit = val - (nextVal*10) + 48;
		if (val < 10){
			do appendChar(lastDigit);
		}else{
			do setIntHelper(nextVal);
			do appendChar(lastDigit);
		}
		return;
	}


    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val){
		// Erase string and set idx to start
		let len = 0;
		if (val < 0){
			do appendChar(45);
			let val = -val;
		}
		do setIntHelper(val);
		return;
    }

    /** Returns the new line character. */
    function char newLine(){
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace(){
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote(){
		return 34;
    }
}
